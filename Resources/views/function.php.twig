${{ var }} = new \stdClass();
${{ var }}_links = [];
if ($sample === 'id') {
    ${{ var }}->id = ${{ object }}->getId();
} else {
    {% for field in fields %}
        if ($sample === 'all' || isset($sample->{{field.name}})) {
            $val = ${{ object }}->{{field.getter}}();
        {% if field.type in ['binary','blob'] %}
        {% elseif field.type in ['datetime','date','datetime_immutable','datetimetz','datetimetz_immutable'] %}
            if($val) ${{ var }}->{{field.name}} = $val->format(DATE_W3C);
        {% elseif field.type in ['time','time_immutable'] %}
            if($val) ${{ var }}->{{field.name}} = $val->format('H:i:s');
        {% elseif field.type == 'dateinterval' %}
            if($val) {
                ${{ var }}->{{field.name}} = str_replace(
                    ["M0S", "H0M", "D0H", "M0D", "Y0M", "P0Y"],
                    ["M", "H", "D", "M", "Y0M", "P"],
                    $val->format("P%yY%mM%dD%hH%iM%sS")
                );
            }
        {% elseif field.type == 'embed' %}
            if($val) {
                $_{{ object }} = $val;
                {% include '@JettJSONEntitySerializerBundle/Resources/views/function.php.twig'
                    with {'var':'_'~var,
                    'fields': field.fields,
                    'links': field.relations,
                    'object': '_'~object,
                    'return': false
                }%}
                ${{ var }}->{{ field.name }} = $_{{ var }};
            }
        {% else %}
            ${{ var }}->{{field.name}} = $val;
        {% endif %}
        }
    {% endfor%}
    {% for link in links %}
    if (($sample === 'all' || isset($sample->{{link.name}})) && $val = ${{ object }}->{{link.getter}}()) {
        {% if link.isSingleValued == false %}
            ${{ var }}_links['{{link.name}}'] = [];
            foreach($val as $item) {
                $innerSample = $sample == 'all'? 'id': $sample->{{link.name}};
                ${{ var }}_links['{{link.name}}'][] = static::getNode($item, $innerSample, '{{link.entity}}');
            }
        {% else %}
            $innerSample = $sample === 'all'? 'id': $sample->{{link.name}};
            ${{ var }}_links['{{link.name}}'] = static::getNode($val, $innerSample, '{{link.entity}}');
        {% endif %}
    }
    {% endfor %}
}
{% if return %}
return new Node(${{ var }}, ${{ var }}_links);
{% endif %}
